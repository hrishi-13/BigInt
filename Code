#include<bits/stdc++.h>

using namespace std;

const int N = 200;

class Integer {

public:
    vector<int> v;
    string numString;
    int sign = 1;
    vector<int> mag;



    void integerBuildHelper() {
        v = vector<int>(200);
        int i = 0;
        if(numString[0] == '-') {
            sign = -1;
            i++;
        }

        int j = 0;

        for(int k = numString.size() - 1; k >= i; k--) {
            v[j++] = numString[k] - '0';
        }
        reverse(v.begin(), v.end());
        getSignPart();
    }

    
    Integer() {

    }
    Integer(string num) {
        numString = num;
        
        integerBuildHelper();
        
    }

    // return the magnitude of the integer in string format
    string getIntPart() {
        string s = ""; 
        int firstZero = true;
        for(int i = 0; i < (int)v.size(); i++) {
            if(v[i] != 0) {
                firstZero = false;
                s += (v[i] + '0');
            } else if(!firstZero) {
                s += (v[i] + '0');
            }
        }
        if(s == "") s += "0";
        return s;
    }

    int numLength() {
        return getIntPart().size();
    }

    // returns the updated sign 
    int getSignPart() {
        string i = getIntPart();
        if(i == "0") {
            sign = 1;
        }
        return sign;
    }

    // vector<int> getMag() {
    //     string s = getIntPart();
    //     vector<int> ans;
    //     int firstZero = true;
    //     for(int i = 0; i < s.size(); i++) {
    //         if(s[i] != "0") {
    //             ans.push_back(s[i] - '0');
    //             firstZero = false;
    //         } else {
    //             ans.push_back(s[i] - '0');
    //         }
    //     }
    //     return (mag = s);

    // }
 
    // returns the intger in string format
    string getInt() {
        string s;
        if(getSignPart() == -1) {
            s += "-";
        } 
        s += getIntPart();
        return s;
    }


    string addHelper(string s1, string s2) {
        reverse(s1.begin(), s1.end());
        reverse(s2.begin(), s2.end());
        int _n1 = s1.size();
        int _n2 = s2.size();
        int _carry = 0;
        string ans;

        for(int _i = 0; _i < max(_n1, _n2); _i++) {
            int _temp = _carry;
            if(_i < _n1) {
                _temp += (s1[_i] - '0');
            } 
            if(_i < _n2) {
                _temp += (s2[_i] - '0');
            }
            _carry = _temp / 10;
            ans += to_string(_temp%10)[0];
        }
        if(_carry) {
            ans += "1";
        }
        reverse(ans.begin(), ans.end());
        return ans;
    }

    string subHelper(string s1, string s2) {
        reverse(s1.begin(), s1.end());
        reverse(s2.begin(), s2.end());

        int _n1 = s1.size();
        int _n2 = s2.size();
        int _carry = 0;
        string ans = "";
        for(int i = 0; i < _n2; i++) {
            int currSub = 0;
            currSub = (s1[i] - '0') - (s2[i] - '0') - _carry;
               
            if(currSub < 0) {
                currSub += 10;
                _carry = 1;
            } else {
                _carry = 0;
            }
            ans += (currSub + '0');
        }
            
        for(int i = _n2; i < _n1; i++) {
            int currSub = 0;
            currSub = (s1[i] - '0') - _carry;
               
            if(currSub < 0) {
                currSub += 10;
                _carry = 1;
            } else {
                _carry = 0;
            }
            ans += (currSub + '0');
        }
        reverse(ans.begin(), ans.end());
        string str;
        bool firstZero = true;
        for(int i = 0; i < (int)ans.size(); i++) {
            if(ans[i] != '0') {
                str += ans[i];
                firstZero = false;
            } else if(!firstZero) {
                str += ans[i];
            }
        }
        return str;
    }

    bool checkSmall(string s1, string s2) {
        if(s1.size() < s2.size()) return true;
        else if(s1.size() > s2.size()) return false;
